---
description: Coding workflow preferences and Coding pattern preferences
globs: 
alwaysApply: true
---
# Coding workflow preferences

- Focus on the areas of code relevant to the task
- Do not touch code that is unrelated to the task
- Write thorough tests for all major functionality
- Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly structed (likely meant to be "instructed")
- Always think about what other methods and areas of code might be affected by code changes


# Coding pattern preferences

- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality
- Write code that takes into account the different environments: dev, test, and prod
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- Avoid having files over 200-300 lines of code. Refactor at that point.
- Mocking data is only needed for tests, never mock data for dev or prod
- Never add stubbing or fake data patterns to code that affects the dev or prod environments
- Never overwrite my .env file without first asking and confirming
- Cover new features with tests


# Application structure

Let's review our code and make sure it is structured according to the following logic:


## Commands (aka Controllers)

- Request handling: parsing parameters and preparing them to be used by services
- Input validation
- Access control, authorization
- Calling the right service to do the job
- Return a response (JSON, status code, etc.)
- Handle errors and maybe send proper error messages


## Services

- Handle core logic: contain the main logic for features
- Talk to the database (through models)
- Work with external APIs
- Keep controllers clean: The controller (that handles requests) should only get data from the request, call the right service, and return a response


## Models

- Define the data structure
- Handle persistance (database) operations
- Sometimes include basic logic close to the data (like validation or computed fields)

## Helpers or Utils

- Format data (e.g. format a date or time)
- Do simple calculations
- Generate random strings or IDs
- Validate data (basic checks)
- Work with strings, arrays, numbers, etc.
